{"name": "test_add_product_to_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"Email\"]\"}\n  (Session info: chrome=137.0.7151.41)\nStacktrace:\n0   chromedriver                        0x0000000107b44898 chromedriver + 5986456\n1   chromedriver                        0x0000000107b3b9ca chromedriver + 5949898\n2   chromedriver                        0x00000001075f4600 chromedriver + 415232\n3   chromedriver                        0x0000000107646304 chromedriver + 750340\n4   chromedriver                        0x0000000107646521 chromedriver + 750881\n5   chromedriver                        0x0000000107696204 chromedriver + 1077764\n6   chromedriver                        0x000000010766c33d chromedriver + 906045\n7   chromedriver                        0x0000000107693566 chromedriver + 1066342\n8   chromedriver                        0x000000010766c0e3 chromedriver + 905443\n9   chromedriver                        0x000000010763861d chromedriver + 693789\n10  chromedriver                        0x0000000107639281 chromedriver + 696961\n11  chromedriver                        0x0000000107b02560 chromedriver + 5715296\n12  chromedriver                        0x0000000107b06425 chromedriver + 5731365\n13  chromedriver                        0x0000000107adceb0 chromedriver + 5562032\n14  chromedriver                        0x0000000107b06e5b chromedriver + 5733979\n15  chromedriver                        0x0000000107acbdc4 chromedriver + 5492164\n16  chromedriver                        0x0000000107b29a78 chromedriver + 5876344\n17  chromedriver                        0x0000000107b29c40 chromedriver + 5876800\n18  chromedriver                        0x0000000107b3b591 chromedriver + 5948817\n19  libsystem_pthread.dylib             0x00007ff809470df1 _pthread_start + 99\n20  libsystem_pthread.dylib             0x00007ff80946c857 thread_start + 15", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ab157bf7d9bcb6d7e9b2f8c2055269c0\")>\n\n    def test_add_product_to_cart(driver):\n        \"\"\"Test adding a searched product to the cart.\"\"\"\n        driver.get(\"https://your-ecommerce-site.com/login\")\n        user = get_test_user()\n>       LoginPage(driver).login(user[\"username\"], user[\"password\"])\n\necommerce_automation/tests/test_add_to_cart.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\necommerce_automation/pages/login_page.py:12: in login\n    self.driver.find_element(*self.email_input).clear()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:1251: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e567400>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...7ff809470df1 _pthread_start + 99\\\\n20  libsystem_pthread.dylib             0x00007ff80946c857 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"Email\"]\"}\nE         (Session info: chrome=137.0.7151.41)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000107b44898 chromedriver + 5986456\nE       1   chromedriver                        0x0000000107b3b9ca chromedriver + 5949898\nE       2   chromedriver                        0x00000001075f4600 chromedriver + 415232\nE       3   chromedriver                        0x0000000107646304 chromedriver + 750340\nE       4   chromedriver                        0x0000000107646521 chromedriver + 750881\nE       5   chromedriver                        0x0000000107696204 chromedriver + 1077764\nE       6   chromedriver                        0x000000010766c33d chromedriver + 906045\nE       7   chromedriver                        0x0000000107693566 chromedriver + 1066342\nE       8   chromedriver                        0x000000010766c0e3 chromedriver + 905443\nE       9   chromedriver                        0x000000010763861d chromedriver + 693789\nE       10  chromedriver                        0x0000000107639281 chromedriver + 696961\nE       11  chromedriver                        0x0000000107b02560 chromedriver + 5715296\nE       12  chromedriver                        0x0000000107b06425 chromedriver + 5731365\nE       13  chromedriver                        0x0000000107adceb0 chromedriver + 5562032\nE       14  chromedriver                        0x0000000107b06e5b chromedriver + 5733979\nE       15  chromedriver                        0x0000000107acbdc4 chromedriver + 5492164\nE       16  chromedriver                        0x0000000107b29a78 chromedriver + 5876344\nE       17  chromedriver                        0x0000000107b29c40 chromedriver + 5876800\nE       18  chromedriver                        0x0000000107b3b591 chromedriver + 5948817\nE       19  libsystem_pthread.dylib             0x00007ff809470df1 _pthread_start + 99\nE       20  libsystem_pthread.dylib             0x00007ff80946c857 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchElementException"}, "description": "Test adding a searched product to the cart.", "start": 1748123134913, "stop": 1748123135163, "uuid": "9d484067-db1d-4331-ad3f-bee326c6d408", "historyId": "7476d186691d1a2f67fa40cc5dbea3e0", "testCaseId": "7476d186691d1a2f67fa40cc5dbea3e0", "fullName": "ecommerce_automation.tests.test_add_to_cart#test_add_product_to_cart", "labels": [{"name": "parentSuite", "value": "ecommerce_automation.tests"}, {"name": "suite", "value": "test_add_to_cart"}, {"name": "host", "value": "MacBookPro.lan"}, {"name": "thread", "value": "24413-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ecommerce_automation.tests.test_add_to_cart"}]}