{"name": "test_search_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please enter some search keyword\nMessage: unexpected alert open: {Alert text : Please enter some search keyword}\n  (Session info: chrome=137.0.7151.41)\nStacktrace:\n0   chromedriver                        0x00000001083d0898 chromedriver + 5986456\n1   chromedriver                        0x00000001083c79ca chromedriver + 5949898\n2   chromedriver                        0x0000000107e80600 chromedriver + 415232\n3   chromedriver                        0x0000000107f1ffa9 chromedriver + 1068969\n4   chromedriver                        0x0000000107ef80e3 chromedriver + 905443\n5   chromedriver                        0x0000000107ec461d chromedriver + 693789\n6   chromedriver                        0x0000000107ec5281 chromedriver + 696961\n7   chromedriver                        0x000000010838e560 chromedriver + 5715296\n8   chromedriver                        0x0000000108392425 chromedriver + 5731365\n9   chromedriver                        0x0000000108368eb0 chromedriver + 5562032\n10  chromedriver                        0x0000000108392e5b chromedriver + 5733979\n11  chromedriver                        0x0000000108357dc4 chromedriver + 5492164\n12  chromedriver                        0x00000001083b5a78 chromedriver + 5876344\n13  chromedriver                        0x00000001083b5c40 chromedriver + 5876800\n14  chromedriver                        0x00000001083c7591 chromedriver + 5948817\n15  libsystem_pthread.dylib             0x00007ff809470df1 _pthread_start + 99\n16  libsystem_pthread.dylib             0x00007ff80946c857 thread_start + 15", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f8520e69b37d98aed98230bb9df81e7a\")>\n\n    @pytest.mark.search\n    @allure.feature('Product Search')\n    @allure.story('Search Product')\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_search_product(driver):\n        \"\"\"Test product search functionality.\"\"\"\n        test_id = str(uuid.uuid4())\n        start_time = time.time()\n        product_name = get_product_name()\n    \n        try:\n            # Log test start\n            logger.log_test_start(\n                \"test_search_product\",\n                browser=driver.capabilities.get('browserName', 'unknown'),\n                test_id=test_id,\n                environment=getattr(driver, 'test_env', 'test')\n            )\n    \n            # Step 1: Navigate to search page\n            logger.log_test_step(\"Navigate to home\", \"started\", test_id=test_id)\n            driver.get(\"https://demowebshop.tricentis.com/login\")\n            logger.log_test_step(\"Navigate to home\", \"completed\", test_id=test_id)\n    \n            # Step 2: Perform product search\n            logger.log_test_step(\"Search product\", \"started\",\n                                test_id=test_id,\n                                details={\"product\": product_name})\n            user = get_test_user()\n            LoginPage(driver).login(user[\"username\"], user[\"password\"])\n>           driver.get(\"https://demowebshop.tricentis.com/\")\n\ntests/test_search.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:472: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1108faf30>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Please enter some search keyword\"},\"error\":\"unexpected alert open\"...7ff809470df1 _pthread_start + 99\\\\n16  libsystem_pthread.dylib             0x00007ff80946c857 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Please enter some search keyword\nE           Message: unexpected alert open: {Alert text : Please enter some search keyword}\nE             (Session info: chrome=137.0.7151.41)\nE           Stacktrace:\nE           0   chromedriver                        0x00000001083d0898 chromedriver + 5986456\nE           1   chromedriver                        0x00000001083c79ca chromedriver + 5949898\nE           2   chromedriver                        0x0000000107e80600 chromedriver + 415232\nE           3   chromedriver                        0x0000000107f1ffa9 chromedriver + 1068969\nE           4   chromedriver                        0x0000000107ef80e3 chromedriver + 905443\nE           5   chromedriver                        0x0000000107ec461d chromedriver + 693789\nE           6   chromedriver                        0x0000000107ec5281 chromedriver + 696961\nE           7   chromedriver                        0x000000010838e560 chromedriver + 5715296\nE           8   chromedriver                        0x0000000108392425 chromedriver + 5731365\nE           9   chromedriver                        0x0000000108368eb0 chromedriver + 5562032\nE           10  chromedriver                        0x0000000108392e5b chromedriver + 5733979\nE           11  chromedriver                        0x0000000108357dc4 chromedriver + 5492164\nE           12  chromedriver                        0x00000001083b5a78 chromedriver + 5876344\nE           13  chromedriver                        0x00000001083b5c40 chromedriver + 5876800\nE           14  chromedriver                        0x00000001083c7591 chromedriver + 5948817\nE           15  libsystem_pthread.dylib             0x00007ff809470df1 _pthread_start + 99\nE           16  libsystem_pthread.dylib             0x00007ff80946c857 thread_start + 15\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:231: UnexpectedAlertPresentException"}, "description": "Test product search functionality.", "attachments": [{"name": "log", "source": "31ced0dd-3c5f-432e-b3cb-9bb17d086eb5-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e6eb51a4-48cb-4cb8-8417-17b3b01f1e65-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "f350151e-b212-4173-8fb3-7ade7f703241-attachment.txt", "type": "text/plain"}], "start": 1748128021113, "stop": 1748128023718, "uuid": "54230138-90e6-422f-bed1-82a043789a0c", "historyId": "1fbf4cc487ccce0d689b9c31e9c69623", "testCaseId": "1fbf4cc487ccce0d689b9c31e9c69623", "fullName": "tests.test_search#test_search_product", "labels": [{"name": "severity", "value": "critical"}, {"name": "story", "value": "Search Product"}, {"name": "feature", "value": "Product Search"}, {"name": "tag", "value": "search"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_search"}, {"name": "host", "value": "MacBookPro.lan"}, {"name": "thread", "value": "44308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_search"}]}